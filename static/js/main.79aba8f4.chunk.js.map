{"version":3,"sources":["component/CurrentCard.js","component/Card.js","component/PastCardList.js","component/Scroll.js","component/ErrorBoundary.js","container/App.js","reportWebVitals.js","index.js"],"names":["CurrentCard","weather","func","converter","id","className","src","CWeatherIcon","alt","CWeatherMain","CWeatherDescription","CWeatherTemp","CWeatherFeel","LastUpdate","onClick","icon","faSyncAlt","size","CWeatherClouds","CWeatherUVI","CWeatherDew","CWeatherPressure","CWeatherHumidity","CWeatherRain","CWeatherWind","CWeatherWindDeg","CWeatherWindGust","CWeatherVisibility","CLocation","CTimezone","CDaySunrise","CDaySunset","Card","main","description","temp","morn","day","eve","night","min","max","feels_like","clouds","uvi","dew_point","pressure","humidity","rain","pop","wind_speed","wind_deg","wind_gust","sunrise","sunset","moon_phase","moonrise","moonset","dt","PastCardList","Object","values","map","value","i","Scroll","props","style","overflowY","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","loadValue","navigator","geolocation","getCurrentPosition","position","fetch","coords","latitude","longitude","then","response","json","current","visibility","timezone_offset","timezone","Next7Days","daily","undefined","alert","Convert","time","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","ampm","substr","getDay","getMonth","getDate","getFullYear","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"oRA8EeA,EAxEK,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,UAE7B,OACL,sBACCC,GAAG,OACHC,UAAU,kEAFX,UAIC,sBAAKA,UAAU,kCAAf,UACC,qBACCA,UAAU,WACVC,IAAG,2CAAsCL,EAAQM,aAA9C,WACHC,IAAI,iBAEL,qBAAIH,UAAU,cAAd,UACEJ,EAAQQ,aACT,uBACA,+BAAOR,EAAQS,yBAEhB,qBAAIL,UAAU,cAAd,UACC,uBAAMA,UAAU,WAAhB,UACEJ,EAAQU,aADV,YAGA,uBAJD,eAKcV,EAAQW,aALtB,YAOA,kDACkBT,EAAUF,EAAQY,YAAc,IAAK,IACtD,cAAC,IAAD,CACCR,UAAU,eACVS,QAASZ,EACTa,KAAMC,IACNC,KAAK,aAIR,sBAAKZ,UAAU,uCAAf,UACC,sBAAKA,UAAU,YAAf,UACC,+CAAkBJ,EAAQiB,eAA1B,QACA,6CAAgBjB,EAAQkB,eACxB,8CAAiBlB,EAAQmB,YAAzB,eAED,sBAAKf,UAAU,YAAf,UACC,6CAAgBJ,EAAQoB,iBAAxB,SACA,6CAAgBpB,EAAQqB,iBAAxB,OACA,sDAAyBrB,EAAQsB,aAAjC,eAGF,sBAAKlB,UAAU,oCAAf,UACC,sBAAKA,UAAU,YAAf,UACC,+CAAkBJ,EAAQuB,aAA1B,UACA,+CAAkBvB,EAAQwB,gBAA1B,UACA,8CAAiBxB,EAAQyB,iBAAzB,UACA,+CAAkBzB,EAAQ0B,mBAA1B,YAGD,sBAAKtB,UAAU,YAAf,UACC,qDAAwBJ,EAAQ2B,aAChC,0DAA6B3B,EAAQ4B,aACrC,uDACsB,IACpB1B,EAAUF,EAAQ6B,gBAEpB,uDACsB3B,EAAUF,EAAQ8B,yBCT/BC,EA1DF,SAAC,GAA0B,IAAzB/B,EAAwB,EAAxBA,QAASE,EAAe,EAAfA,UAEpB,OACI,sBAAKC,GAAK,OACVC,UAAY,+DADZ,UAEQ,sBAAKA,UAAY,2CAAjB,UACI,qBAAMA,UAAU,WAAWC,IAAG,2CAAsCL,EAAQA,QAAQ,GAAGc,KAAzD,WAAwEP,IAAI,iBAC1G,qBAAIH,UAAU,yBAAd,UAAwCJ,EAAQA,QAAQ,GAAGgC,KAAK,uBAC5D,+BAAOhC,EAAQA,QAAQ,GAAGiC,iBAElC,gCACI,qBAAI7B,UAAU,aAAd,2BAA0CJ,EAAQkC,KAAKC,KAAvD,uBACA,qBAAI/B,UAAU,aAAd,2BAA0CJ,EAAQkC,KAAKE,IAAvD,mBACA,qBAAIhC,UAAU,aAAd,2BAA0CJ,EAAQkC,KAAKG,IAAvD,uBACA,qBAAIjC,UAAU,aAAd,2BAA0CJ,EAAQkC,KAAKI,MAAvD,qBACA,qBAAIlC,UAAU,aAAd,+BAA8CJ,EAAQkC,KAAKK,IAA3D,YACA,qBAAInC,UAAU,aAAd,+BAA8CJ,EAAQkC,KAAKM,IAA3D,kBAGJ,sBAAKpC,UAAY,sCAAjB,UACA,gCACI,gDAAmBJ,EAAQyC,WAAWN,KAAtC,uBACA,gCAAMnC,EAAQyC,WAAWL,IAAzB,mBACA,gCAAMpC,EAAQyC,WAAWJ,IAAzB,uBACA,gCAAMrC,EAAQyC,WAAWH,MAAzB,wBAEA,sBAAKlC,UAAU,YAAf,UACI,+CAAkBJ,EAAQ0C,OAA1B,QACA,6CAAgB1C,EAAQ2C,OACxB,8CAAiB3C,EAAQ4C,UAAzB,eAEJ,sBAAKxC,UAAU,YAAf,UACI,6CAAgBJ,EAAQ6C,SAAxB,SACA,6CAAgB7C,EAAQ8C,SAAxB,OACA,yCAAY9C,EAAQ+C,KAApB,SACA,kDAAqB/C,EAAQgD,aAGrC,sBAAK5C,UAAY,mCAAjB,UACI,sBAAKA,UAAU,YAAf,UACI,+CAAkBJ,EAAQiD,WAA1B,UACA,+CAAkBjD,EAAQkD,SAA1B,UACA,8CAAiBlD,EAAQmD,UAAzB,aAGJ,sBAAK/C,UAAU,YAAf,UACI,4CAAeF,EAAUF,EAAQoD,YACjC,2CAAclD,EAAUF,EAAQqD,WAChC,+CAAkBrD,EAAQsD,cAC1B,6CAAgBpD,EAAUF,EAAQuD,aAClC,4CAAerD,EAAUF,EAAQwD,YACjC,kDAAqBtD,EAAUF,EAAQyD,iBCrChDC,EAbM,SAAC,GAA0B,IAAzB1D,EAAwB,EAAxBA,QAASE,EAAe,EAAfA,UAI5B,OACI,8BACKyD,OAAOC,OAAO5D,GAAS6D,KAAI,SAACC,EAAOC,GAChC,OAAQ,cAAC,EAAD,CAAc7D,UAAWA,EAAWF,QAASA,EAAQ+D,IAA1CA,SCApBC,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,SAA1C,SACMH,EAAMI,YCiBLC,E,kDAnBX,WAAYL,GAAQ,IAAD,8BACf,cAAMA,IACDM,MAAQ,CACTC,UAAW,GAHA,E,qDAMnB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CACVJ,UAAW,M,oBAInB,WACI,OAAOG,KAAKJ,MAAMC,SACd,sEACAG,KAAKV,MAAMI,a,GAhBKQ,aCoHbC,E,kDA9Gb,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IA0BRc,UAAY,WACNC,UAAUC,YACZD,UAAUC,YAAYC,oBAAmB,SAACC,GACxCC,MAAM,gGAAD,OACsFD,EAASE,OAAOC,SADtG,gBACsHH,EAASE,OAAOE,UADtI,yDAGTC,MAAK,SAACC,GACN,OAAOA,EAASC,UAEhBF,MAAK,SAACxF,GACN,EAAK4E,SAAS,CACbtE,aAAcN,EAAQ2F,QAAQ3F,QAAQ,GAAGc,KACzCN,aAAcR,EAAQ2F,QAAQ3F,QAAQ,GAAGgC,KACzCvB,oBAAqBT,EAAQ2F,QAAQ3F,QAAQ,GAAGiC,YAChDvB,aAAcV,EAAQ2F,QAAQzD,KAC9BR,mBAAoB1B,EAAQ2F,QAAQC,WAAa,IACjDjF,aAAcX,EAAQ2F,QAAQlD,WAC9BrB,iBAAkBpB,EAAQ2F,QAAQ9C,SAClCxB,iBAAkBrB,EAAQ2F,QAAQ7C,SAClC7B,eAAgBjB,EAAQ2F,QAAQjD,OAChCxB,YAAalB,EAAQ2F,QAAQhD,IAC7BxB,YAAanB,EAAQ2F,QAAQ/C,UAC7BrB,aAAcvB,EAAQ2F,QAAQ1C,WAC9BzB,gBAAiBxB,EAAQ2F,QAAQzC,SACjCzB,iBAAkBzB,EAAQ2F,QAAQxC,UAClCvC,WAAYZ,EAAQ2F,QAAQlC,GAC5B7B,UAAW5B,EAAQ6F,gBAAkB,KACrClE,UAAW3B,EAAQ8F,SACnBjE,YAAa7B,EAAQ2F,QAAQvC,QAC7BtB,WAAY9B,EAAQ2F,QAAQtC,OAC5B0C,UAAW/F,EAAQgG,aAESC,IAAzBjG,EAAQ2F,QAAQ5C,KACnB,EAAK6B,SAAS,CACbtD,aAAc,SAGf,EAAKsD,SAAS,CACbtD,aAAcqC,OAAOC,OAAO5D,EAAQ2F,QAAQ5C,MAAM,WAMlDmD,MAAM,kDAvES,EA6EnBC,QAAU,SAACC,GACT,IAAIC,EAAO,IAAIC,KAAY,IAAPF,GAGhBG,EAAQF,EAAKG,WACbC,EAAU,IAAMJ,EAAKK,aACrBC,EAAU,IAAMN,EAAKO,aACrBC,EAAON,GAAS,GAAK,MAAQ,MAKjC,OAHAA,GADAA,GAAgB,KACQ,IAEI,OAD5BE,EAAUA,EAAU,GAAK,IAAMA,EAAUA,GACGK,QAAQ,GAAK,MAAQH,EAAQG,QAAQ,GAAKD,EAAO,OAThF,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAS2BR,EAAKU,UAAY,KAR7G,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAQYV,EAAKW,YAAc,IAAMX,EAAKY,UAAY,KAAOZ,EAAKa,eAtFhM,EAAK3C,MAAQ,CACXjE,aAAc,GACdE,aAAc,GACdC,oBAAqB,GACrBC,aAAc,GACdgB,mBAAoB,GACpBf,aAAc,GACdS,iBAAkB,GAClBC,iBAAkB,GAClBJ,eAAgB,GAChBC,YAAa,GACbC,YAAa,GACbG,aAAc,GACdC,aAAc,GACdC,gBAAiB,GACjBC,iBAAkB,GAClBE,UAAW,GACXf,WAAY,GACZgB,UAAW,GACXC,YAAa,GACbC,WAAY,GACZiE,UAAY,IAvBG,E,qDA0EnB,WACEpB,KAAKI,c,oBAiBP,WACE,OAAQJ,KAAKJ,MAAM9D,oBAAoB0G,OAElC,gCACD,oBAAI/G,UAAY,kEAAhB,0BACA,cAAC,EAAD,UACE,eAAC,EAAD,WACA,oBAAIA,UAAY,yCAAhB,8BACA,cAAC,EAAD,CAAaJ,QAAS2E,KAAKJ,MAAOtE,KAAM0E,KAAKI,UAAW7E,UAAWyE,KAAKwB,QAAxE,eACA,oBAAI/F,UAAY,yCAAhB,8BACA,cAAC,EAAD,CAAcJ,QAAS2E,KAAKJ,MAAMwB,UAAW7F,UAAWyE,KAAKwB,kBARjE,oBAAI/F,UAAU,wEAAd,8B,GA/FYyE,aCKHuC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OAAQ,cAAC,EAAD,IAASC,SAASC,eAAe,SAKlDX,M","file":"static/js/main.79aba8f4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./CurrentCard.css\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSyncAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nconst CurrentCard = ({weather, func, converter}) => {\r\n    \r\n        return (\r\n\t\t\t<div\r\n\t\t\t\tid='card'\r\n\t\t\t\tclassName='pa2 ma3 br3 dib bg-lightest-blue bw2 shadow-2 mw8 center ph3-ns'\r\n\t\t\t>\r\n\t\t\t\t<div className='main tc fl w-100 w-third-ns pa2'>\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tclassName='Ccardimg'\r\n\t\t\t\t\t\tsrc={`http://openweathermap.org/img/wn/${weather.CWeatherIcon}@2x.png`}\r\n\t\t\t\t\t\talt='weather_icon'\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<h2 className='sub-text tc'>\r\n\t\t\t\t\t\t{weather.CWeatherMain}\r\n\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t<span>{weather.CWeatherDescription}</span>\r\n\t\t\t\t\t</h2>\r\n\t\t\t\t\t<h1 className='main-txt tc'>\r\n\t\t\t\t\t\t<span className='big-text'>\r\n\t\t\t\t\t\t\t{weather.CWeatherTemp} °C\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\tFeels Like: {weather.CWeatherFeel} °C\r\n\t\t\t\t\t</h1>\r\n\t\t\t\t\t<h3>\r\n\t\t\t\t\t\tLast Update at: {converter(weather.LastUpdate) + ' '}{' '}\r\n\t\t\t\t\t\t<FontAwesomeIcon\r\n\t\t\t\t\t\t\tclassName='grow pointer'\r\n\t\t\t\t\t\t\tonClick={func}\r\n\t\t\t\t\t\t\ticon={faSyncAlt}\r\n\t\t\t\t\t\t\tsize='xs'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</h3>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='para-text tc fl w-100 w-third-ns pa2'>\r\n\t\t\t\t\t<div className='col2 row1'>\r\n\t\t\t\t\t\t<div>Cloudiness: {weather.CWeatherClouds} %</div>\r\n\t\t\t\t\t\t<div>UV Index: {weather.CWeatherUVI}</div>\r\n\t\t\t\t\t\t<div>Dew Point: {weather.CWeatherDew} °C</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='col2 row2'>\r\n\t\t\t\t\t\t<div>Pressure: {weather.CWeatherPressure} mb</div>\r\n\t\t\t\t\t\t<div>Humidity: {weather.CWeatherHumidity}%</div>\r\n\t\t\t\t\t\t<div>Rain in last hour: {weather.CWeatherRain} mm</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='para-text fl w-100 w-third-ns pa2'>\r\n\t\t\t\t\t<div className='col3 row1'>\r\n\t\t\t\t\t\t<div>Wind Speed: {weather.CWeatherWind} m/s</div>\r\n\t\t\t\t\t\t<div>Wind Angle: {weather.CWeatherWindDeg} deg</div>\r\n\t\t\t\t\t\t<div>Wind Gust: {weather.CWeatherWindGust} m/s</div>\r\n\t\t\t\t\t\t<div>Visibility: {weather.CWeatherVisibility} km</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div className='col3 row2'>\r\n\t\t\t\t\t\t<div>Current Location: {weather.CLocation}</div>\r\n\t\t\t\t\t\t<div>Current Timezone: GMT +{weather.CTimezone}</div>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\tCurrent day Sunrise:{' '}\r\n\t\t\t\t\t\t\t{converter(weather.CDaySunrise)}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\tCurrent day Sunset: {converter(weather.CDaySunset)}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\r\n}\r\n\r\nexport default CurrentCard;","import React from 'react';\r\n\r\nconst Card = ({weather, converter}) => {\r\n    \r\n    return (\r\n        <div id = \"card\"\r\n        className = \"pa2 ma4 br3 dib bg-light-blue bw2 shadow-2 mw8 center ph3-ns\" >\r\n                <div className = \"main tc para-text fl w-90 w-third-ns pa2\" >\r\n                    < img className=\"Ccardimg\" src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt=\"weather_icon\" />\r\n                    <h2 className=\"sub-text f2 1h-copy tc\">{weather.weather[0].main}<br />\r\n                        <span>{weather.weather[0].description}</span>\r\n                </h2>\r\n                <div>\r\n                    <h1 className=\"f4 lh-copy\"> Temperature: {weather.temp.morn} °C at Morning</h1>\r\n                    <h1 className=\"f4 lh-copy\"> Temperature: {weather.temp.day} °C at Day</h1>\r\n                    <h1 className=\"f4 lh-copy\"> Temperature: {weather.temp.eve} °C at Evening</h1>\r\n                    <h1 className=\"f4 lh-copy\"> Temperature: {weather.temp.night} °C at Night</h1>\r\n                    <h1 className=\"f4 lh-copy\"> Min Temperature: {weather.temp.min} °C</h1>\r\n                    <h1 className=\"f4 lh-copy\"> Max Temperature: {weather.temp.max} °C</h1>\r\n                </div>\r\n                </div>\r\n                <div className = \"para-text tc fl w-90 w-third-ns pa2\" >\r\n                <div>\r\n                    <div>Feels Like : {weather.feels_like.morn} °C at Morning</div>\r\n                    <div>{weather.feels_like.day} °C at Day</div>\r\n                    <div>{weather.feels_like.eve} °C at Evening</div>\r\n                    <div>{weather.feels_like.night} °C at Night</div>\r\n                </div>\r\n                    <div className=\"col2 row1\">\r\n                        <div>Cloudiness: {weather.clouds} %</div>\r\n                        <div>UV Index: {weather.uvi}</div>\r\n                        <div>Dew Point: {weather.dew_point} °C</div>\r\n                    </div>\r\n                    <div className=\"col2 row2\">\r\n                        <div>Pressure: {weather.pressure} mb</div>\r\n                        <div>Humidity: {weather.humidity}%</div>\r\n                        <div>Rain: {weather.rain} mm</div>\r\n                        <div>Precipitation: {weather.pop}</div>\r\n                    </div>\r\n                </div>\r\n                <div className = \"para-text fl w-90 w-third-ns pa2\" >\r\n                    <div className=\"col3 row1\">\r\n                        <div>Wind Speed: {weather.wind_speed} m/s</div>\r\n                        <div>Wind Angle: {weather.wind_deg} deg</div>\r\n                        <div>Wind Gust: {weather.wind_gust} m/s</div>\r\n                    </div>\r\n                \r\n                    <div className=\"col3 row2\">\r\n                        <div>Sunrise: {converter(weather.sunrise)}</div>\r\n                        <div>Sunset: {converter(weather.sunset)}</div>\r\n                        <div>Moon Phase: {weather.moon_phase}</div>\r\n                        <div>Moonrise: {converter(weather.moonrise)}</div>\r\n                        <div>Moonset: {converter(weather.moonset)}</div>\r\n                        <h4>Last Update at: {converter(weather.dt)}</h4>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from \"../component/Card\";\r\n\r\nconst PastCardList = ({weather, converter}) => {\r\n    \r\n    \r\n    \r\n    return (\r\n        <div>\r\n            {Object.values(weather).map((value, i) => {\r\n                return (<Card key={i} converter={converter} weather={weather[i]}></Card>);\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PastCardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', height: '550px'}}>\r\n            { props.children }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError : false,\r\n        }\r\n    }\r\n    componentDidCatch(error, info) {\r\n        this.setState({\r\n            hasError : true,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return this.state.hasError ?\r\n            <h1>Ooopsy doopsy.... something is wrong</h1> :\r\n            this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport '../container/App.css';\r\nimport CurrentCard from '../component/CurrentCard';\r\nimport PastCardList from '../component/PastCardList';\r\nimport Scroll from '../component/Scroll';\r\nimport ErrorBoundary from '../component/ErrorBoundary';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      CWeatherIcon: [],\r\n      CWeatherMain: [],\r\n      CWeatherDescription: [],\r\n      CWeatherTemp: [],\r\n      CWeatherVisibility: [],\r\n      CWeatherFeel: [],\r\n      CWeatherPressure: [],\r\n      CWeatherHumidity: [],\r\n      CWeatherClouds: [],\r\n      CWeatherUVI: [],\r\n      CWeatherDew: [],\r\n      CWeatherRain: [],\r\n      CWeatherWind: [],\r\n      CWeatherWindDeg: [],\r\n      CWeatherWindGust: [],\r\n      CLocation: [],\r\n      LastUpdate: [],\r\n      CTimezone: [],\r\n      CDaySunrise: [],\r\n      CDaySunset: [],\r\n      Next7Days : {},\r\n    };\r\n  }\r\n\r\n  loadValue = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        fetch(\r\n\t\t\t`https://pacific-gorge-78602.herokuapp.com/http://api.openweathermap.org/data/2.5/onecall?lat=${position.coords.latitude}&lon=${position.coords.longitude}&appid=adc1c7a24d6351f21a17bec409439ddf&units=metric`\r\n\t\t)\r\n\t\t\t.then((response) => {\r\n\t\t\t\treturn response.json();\r\n\t\t\t})\r\n\t\t\t.then((weather) => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tCWeatherIcon: weather.current.weather[0].icon,\r\n\t\t\t\t\tCWeatherMain: weather.current.weather[0].main,\r\n\t\t\t\t\tCWeatherDescription: weather.current.weather[0].description,\r\n\t\t\t\t\tCWeatherTemp: weather.current.temp,\r\n\t\t\t\t\tCWeatherVisibility: weather.current.visibility / 1000,\r\n\t\t\t\t\tCWeatherFeel: weather.current.feels_like,\r\n\t\t\t\t\tCWeatherPressure: weather.current.pressure,\r\n\t\t\t\t\tCWeatherHumidity: weather.current.humidity,\r\n\t\t\t\t\tCWeatherClouds: weather.current.clouds,\r\n\t\t\t\t\tCWeatherUVI: weather.current.uvi,\r\n\t\t\t\t\tCWeatherDew: weather.current.dew_point,\r\n\t\t\t\t\tCWeatherWind: weather.current.wind_speed,\r\n\t\t\t\t\tCWeatherWindDeg: weather.current.wind_deg,\r\n\t\t\t\t\tCWeatherWindGust: weather.current.wind_gust,\r\n\t\t\t\t\tLastUpdate: weather.current.dt,\r\n\t\t\t\t\tCTimezone: weather.timezone_offset / 3600,\r\n\t\t\t\t\tCLocation: weather.timezone,\r\n\t\t\t\t\tCDaySunrise: weather.current.sunrise,\r\n\t\t\t\t\tCDaySunset: weather.current.sunset,\r\n\t\t\t\t\tNext7Days: weather.daily,\r\n\t\t\t\t});\r\n\t\t\t\tif (weather.current.rain === undefined) {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tCWeatherRain: '0.00',\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tCWeatherRain: Object.values(weather.current.rain)[0],\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n      });\r\n    } else {\r\n      alert(\"Geolocation is not supported by this browser.\");\r\n    }\r\n  };\r\n  componentDidMount() {\r\n    this.loadValue();\r\n  };\r\n  Convert = (time) => {\r\n    let date = new Date(time * 1000);\r\n    const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let hours = date.getHours();\r\n    let minutes = \"0\" + date.getMinutes();\r\n    let seconds = \"0\" + date.getSeconds();\r\n    var ampm = hours >= 12 ? ' pm' : ' am';\r\n    hours = hours % 12;\r\n    hours = hours ? hours : 12;\r\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n    let formattedTime = hours + ' : ' + minutes.substr(-2) + ' : ' + seconds.substr(-2) + ampm + \" at \" + days[date.getDay()] + \", \" + months[date.getMonth()] + \" \" + date.getDate() + \", \" + date.getFullYear();\r\n    return formattedTime;\r\n  };\r\n\r\n  render() {\r\n    return !this.state.CWeatherDescription.length ?\r\n      <h1 className=\"pa3 ma3 tc f-headline lh-solid ttu tracked-mega mt0 flex items-center\" > loading... </h1> :\r\n        (<div>\r\n        <h1 className = \"pa3 ma3 tc f1 lh-solid bw2 shadow-3 title ttu tracked-mega mt0 \" > WEATHERIFY </h1>\r\n        <ErrorBoundary>\r\n          <Scroll>\r\n          <h2 className = \"tc pa1 ma2 f1 lh-solid ttu tracked mt0\" > AT THIS MOMENT </h2>\r\n          <CurrentCard weather={this.state} func={this.loadValue} converter={this.Convert}> </CurrentCard>\r\n          <h2 className = \"tc pa3 ma2 f1 lh-solid ttu tracked mt0\" > COMING UP NEXT </h2>\r\n          <PastCardList weather={this.state.Next7Days} converter={this.Convert}></PastCardList>\r\n        </Scroll>\r\n        </ErrorBoundary>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './container/App';\r\nimport 'tachyons';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render( <App />, document.getElementById('root'));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}